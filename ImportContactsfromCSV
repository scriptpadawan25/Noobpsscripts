<#
.SYNOPSIS
Import-MailContactsFromCSV.ps1 - Create new mail contacts in Exchange from a CSV file

.DESCRIPTION 
This PowerShell script will take contact data from a CSV file and create mail contacts
in Exchange.

.OUTPUTS
Results are written to a results.log file.

.PARAMETER CSVFileName
Use this parameter to specify a different CSV file name than the
default "contacts.csv".

.PARAMETER OU
Use this parameter to specify an organizational unit for the
contacts to be created in.

.EXAMPLE
.\Import-MailContactsFromCSV.ps1 -CSVFileName externalcontractors.csv

.NOTES
Written by: Paul Cunningham

Find me on:

* My Blog:	http://paulcunningham.me
* Twitter:	https://twitter.com/paulcunningham
* LinkedIn:	http://au.linkedin.com/in/cunninghamp/
* Github:	https://github.com/cunninghamp

For more Exchange Server tips, tricks and news
check out Exchange Server Pro.

* Website:	http://exchangeserverpro.com
* Twitter:	http://twitter.com/exchservpro

Change Log
V1.00, 22/11/2016 - Initial version

V1.50, 18/11/2019 - Edited by Mely Villarta and Rio Gerardino
    - check if contacts from GAL.csv is present with GAL OU
    - Appends existing contacts in GAL $OU with Deparment attribute
    - Detect nonexistent contacts, create and append Department information
    - Disable OU check 
#>

param (
	
    [Parameter( Mandatory=$false)]
    [string]$CSVFileName="C:\scripts\HTSCGAL.csv",
    
    [Parameter( Mandatory=$false)]
    [string]$OU="htsc-us.com/HTSC Accounts/Contacts/HTSC China Contacts"

)

$logfile = "C:\scripts\galresults.log"
Get-Date | Out-File $logfile

<## Check if OU exists
try {
    Get-OrganizationalUnit $OU -ErrorAction STOP
}
catch {
    $message = "The OU $OU was not found"
    $message | Out-File $logfile -Append
    throw $message
}#>

Start-Transcript -path "C:\scripts\galerror.log" -append

If (Test-Path $CSVFileName) {

    ## Import the CSV file
    # CSV headers must be: DisplayName,EmailAddress,Alias,Department
    $csvfile = Import-CSV $CSVFileName
       
    #Loop through each line from CSV file
    foreach ($line in $csvfile) {
	$email = Get-MailContact -anr $line.EmailAddress

    #Write-Output $email

        ## Check if Mail contact exists
		if ( $email -ne $null){

        ## Verbose Output until 
        #$cond=$email -ne $null
        #Write-Output $line.Department

        try {
            ## Modify existing mail contact    
            Get-Mailcontact -anr $line.EmailAddress | Set-Contact -Department $line.Department #-whatif
            "$($line.DisplayName) was modified successfully." | Out-File $logfile -Append
        }

        catch {
            $message = "A problem occured trying to create the $($line.DisplayName) contact"
            $message | Out-File $logfile -Append
            Write-Warning $message | Out-File $logfile -Append
            Write-Warning $_.Exception.Message | Out-File $logfile -Append
            $_.Exception.Message | Out-File $logfile -Append
        }
        }
        
		else { 
            #Write-Output $line.DisplayName
            #Write-Output $line.EmailAddress

         try {
            ## Create New mail contact
            New-MailContact -Name $line.DisplayName -ExternalEmailAddress $line.EmailAddress -OrganizationalUnit $OU | Set-Contact -Department $line.Department #-whatif
            "$($line.DisplayName) was created successfully." | Out-File $logfile -Append
        }

        catch {
            $message = "A problem occured trying to create the $($line.DisplayName) contact"
            $message | Out-File $logfile -Append
            Write-Warning $message | Out-File $logfile -Append
            Write-Warning $_.Exception.Message | Out-File $logfile -Append
            $_.Exception.Message | Out-File $logfile -Append
        }

        }

    }
}

Stop-Transcript
